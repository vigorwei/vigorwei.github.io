[{"content":"堆排序 堆排序基本介绍\n1)堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种**选择排序，**它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。\n2)堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆, 注意 : 没有要求结点的左孩子的值和右孩子的值的大小关系。\n3)每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆\n大顶堆举例说明\n小顶堆举例说明\n一般升序采用大顶堆，降序采用小顶堆\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  public class StackSortDemo { public static void main(String[] args) { int[] arr = {4,6,8,5,9,0,3}; stacksort(arr); System.out.println(Arrays.toString(arr)); } public static void stacksort(int[] arr){ for (int i = arr.length/2 -1; i \u0026gt;=0; i--) { heap(arr,i,arr.length); } for (int i = arr.length-1; i \u0026gt;=0; i--) { int tmp = arr[i]; arr[i] = arr[0]; arr[0] = tmp; heap(arr,0,i); } } public static void heap(int[] arr,int i,int length){ int tmp = arr[i]; for (int j = 2*i+1; j \u0026lt; length; j = 2*j+1) { if(j+1\u0026lt;length\u0026amp;\u0026amp;arr[j]\u0026lt;arr[j+1]){ j++; } if(arr[j]\u0026gt;tmp){ arr[i] = arr[j]; i = j; }else { break; } } arr[i] = tmp; } }   ","date":"2022-03-13T17:14:49+08:00","image":"https://vigorwei.github.io/p/%E5%A0%86%E6%8E%92%E5%BA%8F/wallhaven-672007-2_hu349411a28258a9cc5f53cf994dab486b_213344_120x120_fill_q75_box_smart1.jpg","permalink":"https://vigorwei.github.io/p/%E5%A0%86%E6%8E%92%E5%BA%8F/","title":"堆排序"},{"content":"基数排序 基数排序基本思想\n1)将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。\n2)这样说明，比较难理解，下面我们看一个图文解释，理解基数排序的步骤\n图解 将数组 {53, 3, 542, 748, 14, 214} 使用基数排序, 进行升序排序。\n   ","date":"2022-03-13T17:08:22+08:00","image":"https://vigorwei.github.io/p/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/wallhaven-672007-2_hu349411a28258a9cc5f53cf994dab486b_213344_120x120_fill_q75_box_smart1.jpg","permalink":"https://vigorwei.github.io/p/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/","title":"基数排序"},{"content":"归并排序 归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治**(conquer)的阶段则将分的阶段得到的各答案\u0026quot;修补\u0026quot;在一起，即分而治之)****。**\n图解 我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将[4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，来看下实现步骤\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60  public class MergeSortDemo { public static void main(String[] args) { int[] arr = {8,4,5,7,1,3,6,2,0,234}; int[] nums = new int[arr.length]; mergeRecur(arr,0,arr.length-1,nums); System.out.println(Arrays.toString(arr)); } public static void mergeRecur(int[] arr,int left, int right,int[] nums){ if(left\u0026lt;right){ //System.out.println(\u0026#34;##########\u0026#34;); int mid = (left+right)/2; mergeRecur(arr,left,mid,nums); mergeRecur(arr,mid+1,right,nums); mergeSort(arr,left,mid,right,nums); } } public static void mergeSort(int[] arr,int left,int mid, int right,int[] nums){ int i = left; int j = mid+1; int t = 0; while(i\u0026lt;=mid\u0026amp;\u0026amp;j\u0026lt;=right){ if(arr[i]\u0026lt;=arr[j]){ nums[t] = arr[i]; t+=1; i+=1; }else { nums[t] = arr[j]; t+=1; j+=1; } } while(i\u0026lt;=mid){ nums[t] = arr[i]; t+=1; i+=1; } while(j\u0026lt;=right){ nums[t] = arr[j]; t+=1; j+=1; } int templeft = left; int tempindex = 0; System.out.println(Arrays.toString(nums)); while (templeft\u0026lt;=right){ arr[templeft] = nums[tempindex]; templeft++; tempindex++; }   ","date":"2022-03-13T17:02:27+08:00","image":"https://vigorwei.github.io/p/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/wallhaven-672007-2_hu349411a28258a9cc5f53cf994dab486b_213344_120x120_fill_q75_box_smart1.jpg","permalink":"https://vigorwei.github.io/p/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","title":"归并排序"},{"content":"快速排序 快速排序（Quicksort）是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  public class QuickSortDemo { public static void main(String[] args) { int[] arr = {3,4,6,7,2,7,2,8,0,9,1}; quickSort(arr,0,arr.length-1); System.out.println(Arrays.toString(arr)); } public static void quickSort(int[] arr,int start, int end){ if(start\u0026lt;end){ int left = start; int right = end; int pivot = arr[start]; while(left\u0026lt;right){ while(left\u0026lt;right\u0026amp;\u0026amp;arr[right]\u0026gt;=pivot){ right--; } arr[left] = arr[right]; while (left\u0026lt;right\u0026amp;\u0026amp;arr[left]\u0026lt;=pivot){ left++; } arr[right] = arr[left]; } arr[left] = pivot; quickSort(arr,start,left); quickSort(arr,left+1,end); } } }   ","date":"2022-03-13T16:58:49+08:00","image":"https://vigorwei.github.io/p/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/wallhaven-672007-2_hu349411a28258a9cc5f53cf994dab486b_213344_120x120_fill_q75_box_smart1.jpg","permalink":"https://vigorwei.github.io/p/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","title":"快速排序"},{"content":"希尔排序 简单插入排序存在的问题\n我们看简单的插入排序可能存在的问题.\n数组 arr = {2,3,4,5,6,1} 这时需要插入的数 1(最小), 这样的过程是：\n{2,3,4,5,6,6}\n{2,3,4,5,5,6}\n{2,3,4,4,5,6}\n{2,3,3,4,5,6}\n{2,2,3,4,5,6}\n{1,2,3,4,5,6}\n结论**:** 当需要插入的数是较小的数时，后移的次数明显增多，对效率有影响.\n希尔排序法介绍\n希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序。\n希尔排序法基本思想\n希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止\n图解 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  public class ShellSortDemo { public static void main(String[] args) { int[] arr = {8,9,1,7,2,3,5,4,6,0}; shellSort3(arr); //shellSort2(arr); } public static void shellSort3(int[] arr){ for (int gap = arr.length/2; gap \u0026gt;0 ; gap = gap/2) { for (int i = gap; i \u0026lt; arr.length; i+=gap) { //for (int j = i-gap; j \u0026gt;0 ; j--) { int insertValue = arr[i]; int index = i-gap; if(arr[index+gap]\u0026lt;arr[index]) { while (index \u0026gt;= 0 \u0026amp;\u0026amp; arr[index] \u0026gt; insertValue) { arr[index + gap] = arr[index]; index = index - gap; } arr[index + gap] = insertValue; // arr[i] = min; } } } System.out.println(Arrays.toString(arr)); } public static void shellSort(int[] arr){ for(int gap = arr.length/2;gap\u0026gt;0;gap = gap/2) { for (int i = gap; i \u0026lt;arr.length; i += gap) { for (int j = i-gap; j \u0026gt;= 0; j --) { if (arr[j] \u0026gt; arr[j + gap]) { int temp = arr[j]; arr[j] = arr[j + gap]; arr[j + gap] = temp; } } } } System.out.println(Arrays.toString(arr)); }   ","date":"2022-03-13T16:54:12+08:00","image":"https://vigorwei.github.io/p/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/wallhaven-672007-2_hu349411a28258a9cc5f53cf994dab486b_213344_120x120_fill_q75_box_smart1.jpg","permalink":"https://vigorwei.github.io/p/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/","title":"希尔排序"},{"content":"插入排序 插入排序（Insertion Sorting）的基本思想是：把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。\n图解 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  public class InsertSortDemo { public static void main(String[] args) { int[] arr = new int[]{101,34,29,1,7}; // int[] arr = new int[80000]; // for (int i = 0; i \u0026lt; 80000; i++) { // arr[i] = (int) (Math.random()*80000); // } Date date1 = new Date(); SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;); String s1 = simpleDateFormat.format(date1); System.out.println(\u0026#34;排序前的时间 \u0026#34;+ s1); insertSort(arr); Date date2 = new Date(); String s2 = simpleDateFormat.format(date2); System.out.println(\u0026#34;排序后 \u0026#34;+ s2); } public static void insertSort(int[] arr){ for (int i = 1; i \u0026lt; arr.length; i++) { int insertValue = arr[i]; int insertIndex = i-1; while(insertIndex\u0026gt;=0\u0026amp;\u0026amp;insertValue\u0026lt;arr[insertIndex]){ arr[insertIndex+1] = arr[insertIndex]; insertIndex--; } arr[insertIndex+1] = insertValue; } System.out.println(Arrays.toString(arr)); } }   ","date":"2022-03-13T16:48:47+08:00","image":"https://vigorwei.github.io/p/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/wallhaven-672007-2_hu349411a28258a9cc5f53cf994dab486b_213344_120x120_fill_q75_box_smart1.jpg","permalink":"https://vigorwei.github.io/p/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","title":"插入排序"},{"content":"选择排序 选择排序（select sorting）也是一种简单的排序方法。它的基本思想是：第一次从arr[0]~arr[n-1]中选取最小值，与arr[0]交换，第二次从arr[1]~arr[n-1]中选取最小值，与arr[1]交换，第三次从arr[2]~arr[n-1]中选取最小值，与arr[2]交换，…，第i次从arr[i-1]~arr[n-1]中选取最小值，与arr[i-1]交换，…, 第n-1次从arr[n-2]~arr[n-1]中选取最小值，与arr[n-2]交换，总共通过n-1次，得到一个按排序码从小到大排列的有序序列。\n冒泡排序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  public class SelectSortDemo { public static void main(String[] args) { // int[] arr = new int[]{101,34,29,1}; int[] arr = new int[80000]; for (int i = 0; i \u0026lt; 80000; i++) { arr[i] = (int) (Math.random()*80000); } Date date1 = new Date(); SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;); String s1 = simpleDateFormat.format(date1); System.out.println(\u0026#34;排序前的时间 \u0026#34;+ s1); selectDemo(arr); Date date2 = new Date(); String s2 = simpleDateFormat.format(date2); System.out.println(\u0026#34;排序后 \u0026#34;+ s2); } public static void selectDemo(int[] arr){ for (int j = 0; j \u0026lt; arr.length-1; j++) { int min = arr[j]; int minIndex = j; for (int i = j+1; i \u0026lt; arr.length; i++) { if(arr[i]\u0026lt;min){ min = arr[i]; minIndex = i; } } arr[minIndex] = arr[j]; arr[j] = min; } // System.out.println(Arrays.toString(arr)); }   ","date":"2022-03-13T16:35:46+08:00","image":"https://vigorwei.github.io/p/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/wallhaven-672007-2_hu349411a28258a9cc5f53cf994dab486b_213344_120x120_fill_q75_box_smart1.jpg","permalink":"https://vigorwei.github.io/p/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/","title":"选择排序"},{"content":"冒泡排序 冒泡排序（Bubble Sorting）的基本思想是：通过对待排序序列从前向后（从下标较小的元素开始）,依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒。\n图解 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  public class BubbleSortDemo { public static void main(String[] args) { int[] arr = {3,4,6,7,2,7,2,8,0,9,1}; bubbleSort(arr); System.out.println(Arrays.toString(arr)); } public static void bubbleSort(int[] arr){ for (int i = 0; i \u0026lt; arr.length-1; i++) { for (int j = i+1; j \u0026lt; arr.length; j++) { if(arr[i]\u0026gt;arr[j]){ int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } } } }   ","date":"2022-03-13T16:28:52+08:00","image":"https://vigorwei.github.io/p/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/wallhaven-672007-2_hu349411a28258a9cc5f53cf994dab486b_213344_120x120_fill_q75_box_smart1.jpg","permalink":"https://vigorwei.github.io/p/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/","title":"冒泡排序"},{"content":"hugo更新指令 往基于github的Hugo静态博客推送新博文的步骤分为以下几步：\n 用hugo new命令新建md文件 用hugo -D 生成public html 文件 前往public目录 用git add -A命令将全部更新的文件添加到暂存区 用git commit 命令将暂存区内容添加到分支 用git push 命令将分支内容推到github上去  hugo常用指令集 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  git clone https://github.com/digitalcraftsman/hugo-agency-theme hugo server -t hugo-theme-diaspora-master --buildDrafts hugo new post/blog.md hugo --theme=diaspora --baseUrl=\u0026#34;https://vigorwei.github.io/\u0026#34; --buildDrafts cd public git init git add * git commit -m \u0026#34;我的 hugo 博客第一次提交\u0026#34; git remote add origin https://github.com/LastKnightCoder/lastknightcoder.github.io.git git push -u origin master   开始使用hugo！ 下载安装hugo 我们为了简便快速当然选择hugo的二进制安装方式，源码安装有机会再去学习。 去hugo的官方github仓库下载对应的操作系统版本的Hugo二进制文件: 博主以windows64位操作系统为例，下载对应的Windows-64bit.zip。 下载完成后解压缩得到如上文件。\nMac下直接使用Homebrew安装：(其他步骤同理略)\n1  brew install hugo   hugo环境变量配置 上一步操作，可以看到我们把hugo.exe解压到了D:\\hugo下面。所以hugo命令只能在该目录下才能识别。但是我们想要把博客目录建到其他目录下，这就需要配置环境变量。 此电脑-\u0026gt;右键-\u0026gt;点击属性： 再点击高级系统设置： 点击环境变量 在系统变量中找到path，再点击编辑 点击新建，填入hugo解压的文件目录，比如博主解压在D:\\hugo就填的是D:\\hugo 注意：win10以下系统界面不一样，比如win7，直接在path最前或最后加入地址就行，注意用英文;分号分割开，不会的小白可以问度娘。 配置好后点击确定，然后打开cmd命令行程序就可以在任意位置使用hugo命令了。\nhugo新建博客 win+R键打开运行框，输入cmd打开命令行。 使用如下命令\n1  hugo new site /path/to/site   比如hugo new site E:/hugo/hojunBlog就在E盘hugo文件夹下新建了一个叫hojunBlog的hugo站点。 hugo新建页面和文章 新建一个links页面：\n1  hugo new links.md   links.md 自动生成到了 content/links.md，内容如下\n1 2 3 4 5  ---title:\u0026#34;Links\u0026#34;date:2019-04-11T23:35:53+08:00draft:true---  创建第一篇文章，放到 post 目录，方便之后生成聚合页面。\n1  hugo new post/myfirst.md   links.md 自动生成到了 content/post/myfirst.md，内容如下:(注意这里需要把draft删除掉，不然正式生产的时候不会生成文章，因为draft是草稿)\n1 2 3 4 5  ---title:\u0026#34;Myfirst\u0026#34;date:2019-04-13T23:23:34+08:00draft:true---  hugo安装主题 新建文章后不要着急，还需要安装hugo主题才行。去官方主题列表themes.gohugo.io里去挑选自己想要的主题。 。 我们这里以icarus主题为例来安装主题。github仓库地址github.com/digitalcraftsman/hugo-icarus-theme 根据文档clone主题 在Hugo站点运行的文件夹中\n1 2  cd themes git clone https://github.com/digitalcraftsman/hugo-icarus-theme.git   配置主题 找到icarus主题下的hojunBlog\\themes\\hugo-icarus-theme\\exampleSite\\config.toml复制其内容到根目录下的hojunBlog\\config.toml中，接着修改根目录下的配置文件部分内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13  baseurl = \u0026#34;https://yourname.github.io\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;Icarus\u0026#34; # Enable comments by entering your Disqus shortname disqusShortname = \u0026#34;spf13\u0026#34; # Enable Google Analytics by entering your tracking code googleAnalytics = \u0026#34;\u0026#34; # Define the number of posts per page paginate = 10 footnotereturnlinkcontents = \u0026#34;↩\u0026#34; theme = \u0026#34;hugo-icarus-theme\u0026#34; # Comment the themesDir option if you use this theme in production themesDir = \u0026#34;./themes/\u0026#34;   其中重要的是baseurl、theme、themesDir的配置，其他的配置可以之后慢慢设置。baseurl需要改成你的github pages的仓库名，theme、themesDir改成主题目录名和主题路径（上图填的是相对路径）。 其他配置可以参考icarus主题的文档，这里就不做介绍了。\n使用命令来预览、发布主题 在根目录（比如这里是hojunBlog下）执行：\n1  hugo server   然后打开浏览器，输入localhost:1313就可以看到自己的博客了！（注意之前说的文章里的draft: true要删掉哦） 接着就是要发布主题到github上了，注册github，新建yourname.github.io的仓库，配置SSH，复制仓库的github pages地址到之前说的配置的baseurl中(就是https://yourname.github.io)，然后使用命令：\n","date":"2022-03-13T15:05:12+08:00","image":"https://vigorwei.github.io/p/hugo-relate-api/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://vigorwei.github.io/p/hugo-relate-api/","title":"Hugo Relate Api"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用  思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n 图片 1 2 3  ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg)   相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://vigorwei.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://vigorwei.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code       A B C D E F     Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien    Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Diff code block 1 2 3 4 5  [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;]   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image \n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://vigorwei.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://vigorwei.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode  Twitter Simple Shortcode  Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode","date":"2019-03-10T00:00:00Z","permalink":"https://vigorwei.github.io/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://vigorwei.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://vigorwei.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  1 2 3  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}    To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://vigorwei.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }  ","date":"2019-03-05T00:00:00Z","image":"https://vigorwei.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://vigorwei.github.io/p/emoji-support/","title":"Emoji Support"}]